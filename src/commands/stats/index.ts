import type { MyContext } from '../../types/index.js';
import { UserService } from '../../services/user.service.js';
import { logger } from '../../utils/logger.js';

export const statsCommand = async (ctx: MyContext) => {
  if (!ctx.from) {
    return ctx.reply('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
  }

  try {
    const totalUsers = await UserService.getUsersCount();
    const newUsersToday = await UserService.getNewUsersToday();

    const statsMessage = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n` +
      `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}\n` +
      `üÜï –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: ${newUsersToday}\n\n` +
      `‚ÑπÔ∏è –í–∞—à Telegram ID: ${ctx.from.id}`;

    await ctx.reply(statsMessage);

    logger.info('Stats command executed', {
      telegramId: ctx.from.id,
      username: ctx.from.username,
      totalUsers,
      newUsersToday,
    });

  } catch (error) {
    logger.error('Stats command error', {
      error: error instanceof Error ? error.message : String(error),
      telegramId: ctx.from.id,
      username: ctx.from.username,
    });
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
};
