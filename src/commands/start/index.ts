import type { MyContext } from '../../types/index.js';
import { logger } from '../../utils/logger.js';
import { UserService } from '../../services/user.service.js';

export const startCommand = async (ctx: MyContext) => {
  if (!ctx.from) {
    return ctx.reply('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
  }

  const { first_name, username } = ctx.from;
  const displayName = username || first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

  try {
    let welcomeMessage: string;

    if (ctx.isNewUser) {
      // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      welcomeMessage = `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${displayName}!\n\n` +
        `–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ. –≠—Ç–æ –≤–∞—à –ø–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç!\n\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.`;
      
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      // –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    } else {
      // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      welcomeMessage = `üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${displayName}!\n\n` +
        `–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?`;
    }

    await ctx.reply(welcomeMessage);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const totalUsers = await UserService.getUsersCount();
    const newUsersToday = await UserService.getNewUsersToday();

    logger.info('Start command executed', {
      telegramId: ctx.from.id,
      first_name,
      username,
      isNewUser: ctx.isNewUser,
      totalUsers,
      newUsersToday,
    });

  } catch (error) {
    logger.error('Start command error', {
      error: error instanceof Error ? error.message : String(error),
      telegramId: ctx.from.id,
      username,
    });
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
  }
};
